[
  {
    "objectID": "uninformed.html",
    "href": "uninformed.html",
    "title": "Uninformed Search Algorithms",
    "section": "",
    "text": "The Search Algorithms which have no prior information regarding the Goal State except for the ones provided in the problem statement are called Uninformed Search Algorithms. In order to reach the Goal State from the Start State, these algorithms do a Blind Search - generating a successor at each node and checking whether the Goal State Function is satisfied at that State. Few types of uninformed search algorithms include Breadth-First Search (BFS), Depth-First Search (DFS), Uniform Cost Search (UCS), Iterative Deepening DFS (IDDFS), and Depth Limited Search (DLS). Each algorithm has a unique way of exploring the search space, some do by going level by level, some other move as per the depth parameter, etc. Another important point to note is that these algorithms are relatively simpler to implement, but are not very efficient. This is due to the fact that they do not prioritise or direct the search towards the most promising paths. Thus, they might require a large amount of computational resources and time to find the goal state, particularly in the complex problem domains."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Complete Guide to AI-SMPS",
    "section": "",
    "text": "Table of Contents\n\nIntroduction\nUninformed Search\n\nBreadth-First Search (BFS)\nDepth-First Search (DFS)"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "The goal of science and technology has always been to understand our surroundings which consequently made our pursuit of knowledge easier. With the advent of Artificial Intelligence (henceforth referred to as AI), computational systems have been exhibiting increased learning capabilities. Over the years, “Learned” computational systems have beaten Professional Go players. Few years back, Google’s DeepMind AlphaGo AI took on top human players at chess and poker 1. Drawing inspiration from human cognition, the field of AI aims to replicate human capacity for reasoning, learning, problem solving, and perception. This would let the computational systems tackle complex problems.\nGiven that the aim of AI is to enable intelligent decision making, many search algorithms, with applications in route-optimisation, problem solving etc are often used in the field of AI. Google Maps (henceforth referred to as GMaps) is one of the most innovative and widely used services in the world today. It has been helping people to find the shortest and most convenient routes to their desired destinations. GMaps incorporate Graph data structures in order to compute the shortest path between two points. 2 For this purpose, Dijikstra’s Algorithm is used to navigate the shortest path to reach a destination. Apart from this, A*(A-star) algorithm is currently being used by GMaps for its wide range of dealings with larger graphs.\nIn the Minesweeper game, search algorithms play an important role in finding the safe squares and avoiding mines. It is a logic-based game where the players are required to clear the grid without falling into the hidden mines. Once a mine is triggered, the game ends. Once you click on any unexplored region, the square reveals a number, which indicates the number of mines adjacent to this particular square. Search algorithms like DFS, BFS, and more advanced ones can help to identify and enhance the game’s decision-making process. For example, DFS is useful for exploring deeper into the grid. We can exploit this fact to uncover a sequence of safe squares. It might start by visiting neighbouring squares until a dead end or a clue is met, thus, backtracking to the safe position to find new paths. It is quite possible to emulate these search algorithms to help in rational decision making while increasing the chances of success at the Minesweeper game.\nAlcuin’s River Crossing Problem is a 1000 years old puzzle 3 that involves a wolf, a goat, and a few cabbages. The objective is to ferry all three from one bank of the river to the other, on a boat, which only has enough room for one of the three at a time. Also, if left alone:\nThus, one has to come up with a set of steps to ensure that the aforementioned does not happen and all the three passengers reach the other side of the river safely.\nEach such problem have certain frequently occurring elements associated with them:\nG\n\nState transitions leading to the goal\n\n\nSTART STATE\n\nSTART STATE\n\n\n\nState 1\n\nState 1\n\n\n\nSTART STATE--State 1\n\n\n\n\nState 2\n\nState 2\n\n\n\nSTART STATE--State 2\n\n\n\n\nState 3\n\nState 3\n\n\n\nSTART STATE--State 3\n\n\n\n\nState 2--State 3\n\n\n\n\nGOAL STATE\n\nGOAL STATE\n\n\n\nState 2--GOAL STATE\nNow, any State can be represented as a node of a graph with each node being a member of the State Space. Having said that, to find the Goal State, one has to traverse through the graph. This graph is termed as State Space Graph. Thus, the State Space is a graph structure. With this as the context, we define a few more elements associated with State Space Search:\nA Search Algorithm navigates through the State Space using MoveGen and Goal State Functions. If we take Alcuin’s problem, then:\nThus, I cannot stress enough the importance of search algorithms’ applications in various domains, from optimising routes in Google Maps to solving puzzles like river crossing. Thus, it highlights the power and relevance of these computational methods. These algorithms help in enhanced decision making, optimising the solutions, achieving desired results in an efficient manner. Understanding these algorithms in depth and utilising them in practical applications will enhance the problem solving capabilities. Also, it will drive the future innovation drive in varied fields."
  },
  {
    "objectID": "introduction.html#footnotes",
    "href": "introduction.html#footnotes",
    "title": "Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMcConnachie, J. (2022). Man vs machine: How Artificial Intelligence beats us in board games. TLS. Times Literary Supplement, (6202), 23-24. Link{:target=“_blank”}↩︎\nMehta, H., Kanani, P., & Lande, P. (2019). Google maps. International Journal of Computer Applications, 178(8), 41-46. Link{:target=“_blank”}↩︎\nLampis, M., & Mitsou, V. (2007). Generalizing Alcuin’s River Crossing Problem. In 11th Panhellenic Conference in Informatics (pp. 617-626). Link{:target=“_blank”}↩︎"
  }
]