[
  {
    "objectID": "uninformed.html",
    "href": "uninformed.html",
    "title": "Uninformed Search Algorithms",
    "section": "",
    "text": "The Search Algorithms which have no prior information regarding the Goal State except for the ones provided in the problem statement are called Uninformed Search Algorithms. In order to reach the Goal State from the Start State, these algorithms do a Blind Search - generating a successor at each node and checking whether the Goal State Function is satisfied at that State. Few types of uninformed search algorithms include Breadth-First Search (BFS), Depth-First Search (DFS), Uniform Cost Search (UCS), Iterative Deepening DFS (IDDFS), and Depth Limited Search (DLS). Each algorithm has a unique way of exploring the search space, some do by going level by level, some other move as per the depth parameter, etc. Another important point to note is that these algorithms are relatively simpler to implement, but are not very efficient. This is due to the fact that they do not prioritise or direct the search towards the most promising paths. Thus, they might require a large amount of computational resources and time to find the goal state, particularly in the complex problem domains.",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Uninformed Search Overview"
    ]
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "The goal of science and technology has always been to understand our surroundings which consequently made our pursuit of knowledge easier. With the advent of Artificial Intelligence (henceforth referred to as AI), computational systems have been exhibiting increased learning capabilities. Over the years, “Learned” computational systems have beaten Professional Go players. Few years back, Google’s DeepMind AlphaGo AI took on top human players at chess and poker 1. Drawing inspiration from human cognition, the field of AI aims to replicate human capacity for reasoning, learning, problem solving, and perception. This would let the computational systems tackle complex problems.\nGiven that the aim of AI is to enable intelligent decision making, many search algorithms, with applications in route-optimisation, problem solving etc are often used in the field of AI. Google Maps (henceforth referred to as GMaps) is one of the most innovative and widely used services in the world today. It has been helping people to find the shortest and most convenient routes to their desired destinations. GMaps incorporate Graph data structures in order to compute the shortest path between two points. 2 For this purpose, Dijikstra’s Algorithm is used to navigate the shortest path to reach a destination. Apart from this, A*(A-star) algorithm is currently being used by GMaps for its wide range of dealings with larger graphs.\nIn the Minesweeper game, search algorithms play an important role in finding the safe squares and avoiding mines. It is a logic-based game where the players are required to clear the grid without falling into the hidden mines. Once a mine is triggered, the game ends. Once you click on any unexplored region, the square reveals a number, which indicates the number of mines adjacent to this particular square. Search algorithms like DFS, BFS, and more advanced ones can help to identify and enhance the game’s decision-making process. For example, DFS is useful for exploring deeper into the grid. We can exploit this fact to uncover a sequence of safe squares. It might start by visiting neighbouring squares until a dead end or a clue is met, thus, backtracking to the safe position to find new paths. It is quite possible to emulate these search algorithms to help in rational decision making while increasing the chances of success at the Minesweeper game.\nAlcuin’s River Crossing Problem is a 1000 years old puzzle 3 that involves a wolf, a goat, and a few cabbages. The objective is to ferry all three from one bank of the river to the other, on a boat, which only has enough room for one of the three at a time. Also, if left alone:\nThus, one has to come up with a set of steps to ensure that the aforementioned does not happen and all the three passengers reach the other side of the river safely.\nEach such problem have certain frequently occurring elements associated with them:\nG\n\nState transitions leading to the goal\n\n\nSTART STATE\n\nSTART STATE\n\n\n\nState 1\n\nState 1\n\n\n\nSTART STATE--State 1\n\n\n\n\nState 2\n\nState 2\n\n\n\nSTART STATE--State 2\n\n\n\n\nState 3\n\nState 3\n\n\n\nSTART STATE--State 3\n\n\n\n\nState 2--State 3\n\n\n\n\nGOAL STATE\n\nGOAL STATE\n\n\n\nState 2--GOAL STATE\nNow, any State can be represented as a node of a graph with each node being a member of the State Space. Having said that, to find the Goal State, one has to traverse through the graph. This graph is termed as State Space Graph. Thus, the State Space is a graph structure. With this as the context, we define a few more elements associated with State Space Search:\nA Search Algorithm navigates through the State Space using MoveGen and Goal State Functions. If we take Alcuin’s problem, then:\nThus, I cannot stress enough the importance of search algorithms’ applications in various domains, from optimising routes in Google Maps to solving puzzles like river crossing. Thus, it highlights the power and relevance of these computational methods. These algorithms help in enhanced decision making, optimising the solutions, achieving desired results in an efficient manner. Understanding these algorithms in depth and utilising them in practical applications will enhance the problem solving capabilities. Also, it will drive the future innovation drive in varied fields.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "introduction.html#footnotes",
    "href": "introduction.html#footnotes",
    "title": "Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nMcConnachie, J. (2022). Man vs machine: How Artificial Intelligence beats us in board games. TLS. Times Literary Supplement, (6202), 23-24. Link↩︎\nMehta, H., Kanani, P., & Lande, P. (2019). Google maps. International Journal of Computer Applications, 178(8), 41-46. Link↩︎\nLampis, M., & Mitsou, V. (2007). Generalizing Alcuin’s River Crossing Problem. In 11th Panhellenic Conference in Informatics (pp. 617-626). Link↩︎",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Complete Guide to AI-SMPS",
    "section": "",
    "text": "Table of Contents\n\nIntroduction\nUninformed Search\n\nBreadth-First Search (BFS)\nDepth-First Search (DFS)\nDepth Limited Search (DLS)\nIterative Deepening Depth First Search (IDDFS)\nUniform Cost Search (UCS)\n\nInformed Search",
    "crumbs": [
      "Index"
    ]
  },
  {
    "objectID": "dls.html",
    "href": "dls.html",
    "title": "DLS",
    "section": "",
    "text": "Depth Limited Search (DLS) is a modified version of DFS. When it comes to DLS, the search is limited to specific depth L. At that particular depth, the nodes are considered to have no successors. This, in turn, takes care of the case where DFS might end up searching indefinitely in case the search space spans infinitely or is too large to search in a cost efficient way. DLS starts at the root node and explores all nodes at the current depth before moving on to the next level. If the Goal State is not attained in the current depth, the search shall continue to the next level until either the Goal State is found or the depth limit is reached 1.",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Depth Limited Search (DLS)"
    ]
  },
  {
    "objectID": "dls.html#footnotes",
    "href": "dls.html#footnotes",
    "title": "DLS",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nKumar, R. R., Vadlapatla, T. S. S., Azmeera, S., Komaraneni, A., & Jula, A. (2023). Performance Comparison of Depth Limited Search and A* Algorithm: A Case Study. In E3S Web of Conferences (Vol. 391, p. 01140). EDP Sciences. Link↩︎",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Depth Limited Search (DLS)"
    ]
  },
  {
    "objectID": "bfs.html",
    "href": "bfs.html",
    "title": "BFS",
    "section": "",
    "text": "Breadth First Search (BFS) is an approach that is used to travel through a graph systematically. BFS explores all the neighbours of a Node (State) prior to moving to the next state. It ensures that all nodes at the same depth are visited before moving to the next deeper layer. BFS often is preferred to find shortest paths in an unweighted graph.\nLet there be a graph G which has a set of V vertices and a set of E edges. Thus, we can write:\n\\[ G = (V,E) \\]\nFirstly, all the vertices of G are unexplored. BFS begins with a chosen vertex and explores all its neighbours on the same depth. Further it moves to the neighbours of those vertices, repeating this process until all reachable vertices have been visited. For each vertex, \\[ v \\in V, \\] We can have a bunch of \\[ w \\in V, \\] such that \\[ \\exists edge\\ \\] Between v and w, \\[ (v, w) \\in E. \\] These relationships can be represented using an Adjacency List. 1,2 When it comes to implementation, BFS is implemented using Queue:",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Breadth-First Search (BFS)"
    ]
  },
  {
    "objectID": "bfs.html#footnotes",
    "href": "bfs.html#footnotes",
    "title": "BFS",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nChapter 14 - BFS, CMU Notes Link↩︎\nPresentation, Algorithm Design and Applications, by M. T. Goodrich and R. Tamassia, Wiley, 2015 Link↩︎",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Breadth-First Search (BFS)"
    ]
  },
  {
    "objectID": "dfs.html",
    "href": "dfs.html",
    "title": "DFS",
    "section": "",
    "text": "Depth First Search (DFS), also called backtracking, can help one solve many problems in AI and Combinatorial Theory. Beginning at the Start State (Root Node), the algorithm traverses till the deepest end of each branch. When the deepest state (Node) is visited, it backtracks to its parent node and to traverse to the next deepest node. If there are no siblings, it backtracks and traverses to the deepest end of the neighboring branch. [Note:- A Node in a graph is also called a Vertex. In this paper, these terms would be used interchangeably. Remember, in the State Space Graph, each Node/Vertex represents a state.]\ndfs_graph\n\nDFS Traversal from Node 1\n\n\n1\n\n1\n\n\n\n2\n\n2\n\n\n\n1--2\n\n\n\n\n7\n\n7\n\n\n\n1--7\n\n\n\n\n8\n\n8\n\n\n\n1--8\n\n\n\n\n3\n\n3\n\n\n\n2--3\n\n\n\n\n4\n\n4\n\n\n\n3--4\n\n\n\n\n6\n\n6\n\n\n\n3--6\n\n\n\n\n5\n\n5\n\n\n\n4--5\n\n\n\n\n9\n\n9\n\n\n\n8--9\n\n\n\n\n10\n\n10\n\n\n\n8--10\n\n\n\n\n11\n\n11\n\n\n\n10--11\nLet there be a graph G which has a set of V vertices and a set of E edges. Thus, we can write :\n\\[ G = (V,E) \\]\nInitially, all the vertices of G are unexplored. One can start with a vertex of G and choose an edge to follow 1. This traversal would lead to a new node. We continue this procedure of visiting an unexplored vertex stemming out from the present one. Once we have exhausted all such vertices, we backtrack and find an edge from where an unreached vertex is available, only to repeat the process until we have traversed through all edges exactly once.\nFor each vertex, \\[ v \\in V, \\] We can have a bunch of, \\[ w \\in V, \\] such that, \\[ \\exists edge\\ \\] Between v and w - \\[ (v, w) \\in E. \\] We can construct a list of all such pairs of vertices, which is known as the Adjacency List. A set of such adjacency lists is called an Adjacency Structure for G.",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Depth-First Search (DFS)"
    ]
  },
  {
    "objectID": "dfs.html#footnotes",
    "href": "dfs.html#footnotes",
    "title": "DFS",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTarjan, R. (1972). Depth-first search and linear graph algorithms. SIAM journal on computing, 1(2), 146-160. Link↩︎",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Depth-First Search (DFS)"
    ]
  },
  {
    "objectID": "iddfs.html",
    "href": "iddfs.html",
    "title": "IDDFS",
    "section": "",
    "text": "Iterative Deepening Depth First Search (IDDFS) is an algorithm that is designed to overcome the limitations of both BFS and DFS in trees. It operates by performing a DFS iteratively, while increasing the limit of the depth with each iteration. For instance, it first searches to depth=1, then restarts and searches to depth=2, followed by depth=3 and so on, until the goal state is found. Since IDDFS expands all nodes at a given depth before moving to deeper levels, it guarantees finding the shortest path 1.",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Iterative Deepening DFS (IDDFS)"
    ]
  },
  {
    "objectID": "iddfs.html#footnotes",
    "href": "iddfs.html#footnotes",
    "title": "IDDFS",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nKorf, R. E. (1985). Depth-first iterative-deepening: An optimal admissible tree search. Artificial intelligence, 27(1), 97-109. Link↩︎",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Iterative Deepening DFS (IDDFS)"
    ]
  },
  {
    "objectID": "informed.html",
    "href": "informed.html",
    "title": "Informed Search Algorithms",
    "section": "",
    "text": "Informed search algorithms, better known as heuristic search algorithms, are a separate class of algorithms, that use heuristics (for simplicity, let’s say that it is a kind of additional information) to guide in the search space from the start node to the end node. Needless to say, they are in general, more efficient than uninformed search algorithms. Informed ones have prior knowledge that helps them to become the guiding force and prioritize which paths should be explored first based on their heuristic function. As we will see in this section, different informed algorithms have different heuristic functions. With that changes the methodology to reach the goal state as well. The major advantage is it solves complex problems by reducing the search space, depending on the need to explore.\nFurther, in this chapter, we will explore different informed search algorithms like A, Iterative Deepening A, Memory Bounded A*, Recursive Best First Search, Beam Search, Hill Climbing, and Genetic Algorithms. These algorithms differ in utilizing their unique heuristic functions, which we will surely discuss in their respective sections. However, with increased efficiency, informed search algorithms face a few challenges. Mostly, the need for an effective and accurate heuristic is ever-increasing, this may not always be available or easy to compute. But, surely there is great improvement in performance in terms of time and computational resources.",
    "crumbs": [
      "Informed Search Algorithms",
      "Informed Search Overview"
    ]
  },
  {
    "objectID": "ucs.html",
    "href": "ucs.html",
    "title": "UCS",
    "section": "",
    "text": "Uniform Cost Search (UCS) is a variant of Dijkstra’s Algorithm but it operates on State Space Search based problems on weighted graphs. With a memory requirement similar to BFS, UCS returns an optimal path even when the edge costs vary 1. The goal of UCS is to find a path to the goal state that has the minimum total cost from the start state. It does so by calculating the cumulative cost from the start state to the next state which has the least edge weight, prioritising lower costs in each move. But UCS can only operate on structures which have non-negative weights. While closely related to Dijsktra’s Algorithm, UCS is rooted in heuristic search 2.",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Uniform Cost Search (UCS)"
    ]
  },
  {
    "objectID": "ucs.html#footnotes",
    "href": "ucs.html#footnotes",
    "title": "UCS",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIllinois University Notes, Uninformed Search 4. Link↩︎\nFelner, A. (2011). Position paper: Dijkstra’s algorithm versus uniform cost search or a case against dijkstra’s algorithm. In Proceedings of the International Symposium on Combinatorial Search (Vol. 2, No. 1, pp. 47-51). Link↩︎",
    "crumbs": [
      "Uninformed Search Algorithms",
      "Uniform Cost Search (UCS)"
    ]
  }
]